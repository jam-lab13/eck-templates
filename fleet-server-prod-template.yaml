apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: <name-fleet-server>
# Since kind = Agent, be sure to put something in this name that identifies it as the server.
  namespace: default
spec:
  version: 8.7.0
  kibanaRef:
    name: <kibana-metadata-name>
  elasticsearchRefs:
  - name: <elasticsearch-metadata-name>
  mode: fleet
  fleetServerEnabled: true
  deployment:
    replicas: 1
    podTemplate:
      spec:
        serviceAccountName: elastic-agent
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: <name-elastic-agent>
# Since kind = agent, be sure to put something in this name that identifies it as the agent.
  namespace: default
spec:
  version: 8.7.0
  kibanaRef:
    name: <kibana-metadata-name>
  fleetServerRef:
    name: <fleet-server-metadata-name>
  mode: fleet
  daemonSet:
    podTemplate:
      spec:
        serviceAccountName: elastic-agent
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-agent
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - pods
  - nodes
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups: ["coordination.k8s.io"]
  resources:
  - leases
  verbs:
  - get
  - create
  - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-agent
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-agent
subjects:
- kind: ServiceAccount
  name: elastic-agent
  namespace: default
roleRef:
  kind: ClusterRole
  name: elastic-agent
  apiGroup: rbac.authorization.k8s.io
EOF

